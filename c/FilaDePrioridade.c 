#include "FilaDePrioridade.h"

PFILA criarFila(int max){
  PFILA res = (PFILA) malloc(sizeof(FILADEPRIORIDADE));
  res->maxRegistros = max;
  res->arranjo = (PONT*) malloc(sizeof(PONT)*max);
  int i;
  for (i=0;i<max;i++) res->arranjo[i] = NULL;
  res->fila = NULL; 
  return res;
}

bool exibirLog(PFILA f){
  printf("Log [elementos: %i]\n", tamanho(f));
  PONT atual = f->fila;
  while (atual){
    printf("%p[%i;%f;%p]%p ", atual->ant, atual->id, atual->prioridade, atual, atual->prox);
    atual = atual->prox;
  }
  printf("\n\n");
  return true;
}

int tamanho(PFILA f){
  int i = 0;
  PONT atual = f->fila;
  while (atual){
    i++;
    atual = atual->prox;
  }
  return i;
}

bool inserirElemento(PFILA f, int id, float prioridade){
	if(id<0 || id>=f->maxRegistros || f->arranjo[id] != NULL) return false;
	
	PONT reg = (PONT) malloc(sizeof(REGISTRO));
	reg->id = id;
	reg->prioridade = prioridade;
	
	PONT atual = f->fila;
	PONT ant = NULL;
	PONT prox = NULL;

	while (atual){
		if(prioridade >= atual->prioridade) {
			if (NULL == ant) {
				ant = atual;
			} else {
				if (ant->prioridade >= atual->prioridade)
					ant = atual;
			}
		}
		if (prioridade < atual->prioridade) {
			if (NULL == prox) {
				prox = atual;
			} else {
				 if (prox->prioridade < atual->prioridade)
					prox = atual;
			}
		}
		atual = atual->prox;
	}
	
	//reg->ant->prox = reg;
	//reg->prox->ant = reg;
	prox->ant = reg;
	ant->prox = reg;
	
	reg->prox = prox;
	reg->ant = ant;
	f->arranjo[id] = reg;
	//ant->prox = f->arranjo[id];
	//prox->ant = f->arranjo[id];
	if (reg->ant == NULL) f->fila = f->arranjo[id];

	return true;
}

bool aumentarPrioridade(PFILA f, int id, float novaPrioridade){
	if(id<0 || id>=f->maxRegistros || f->arranjo[id] == NULL || f->arranjo[id]->prioridade >= novaPrioridade) return false;
	
	f->arranjo[id]->prioridade = novaPrioridade;

	PONT atual = f->fila;
	PONT ant, prox = NULL;
	while (atual){
		if(novaPrioridade >= atual->prioridade) {
			prox = atual;
			atual->ant = f->arranjo[id];
		}
		if (novaPrioridade < atual->prioridade) {
			ant = atual;
			atual->prox = f->arranjo[id];
		}
		atual = atual->prox;
	}
	f->arranjo[id]->ant = ant;
	f->arranjo[id]->prox = prox;
	
	if (f->arranjo[id]->prox == NULL) f->fila = f->arranjo[id];

	return true;
}

bool reduzirPrioridade(PFILA f, int id, float novaPrioridade){
	if(id<0 || id>=f->maxRegistros || f->arranjo[id] == NULL || f->arranjo[id]->prioridade <= novaPrioridade) return false;
	
	f->arranjo[id]->prioridade = novaPrioridade;

	PONT atual = f->fila;
	PONT ant, prox = NULL;
	while (atual){
		if(novaPrioridade >= atual->prioridade) {
			prox = atual;
			atual->ant = f->arranjo[id];
		}
		if (novaPrioridade < atual->prioridade) {
			ant = atual;
			atual->prox = f->arranjo[id];
		}
		atual = atual->prox;
	}
	f->arranjo[id]->ant = ant;
	f->arranjo[id]->prox = prox;
	
	if (f->arranjo[id]->prox == NULL) f->fila = f->arranjo[id];

	return true;
}

PONT removerElemento(PFILA f){

	if (f->fila) {
		PONT fila = f->fila;
		f->fila = f->fila->prox;
		fila = NULL;
	}
	return f->fila;
}

bool consultarPrioridade(PFILA f, int id, float* resposta){
	if(id<0 || id>=f->maxRegistros || f->arranjo[id] == NULL) return false;

	*resposta = f->arranjo[id]->prioridade;
	return true;
}
